Bootstrap: library
From: airl_lab/default/airl_env:base_2.0

# base image has sferes, robot_dart on Ubuntu20.04

%labels
    Author h.elias@hotmail.fr base from bryan.lim16@imperial.ac.uk
    Version v0.0.2

%files
    /home/elias-hanna/src/mb_ge /src
	/home/elias-hanna/src/mujoco-py /src
	/home/elias-hanna/src/model_init_study /src
	/home/elias-hanna/src/libfastsim /src
	/home/elias-hanna/src/pyfastsim /src
	/home/elias-hanna/src/fastsim_gym /src
	/home/elias-hanna/src/diversity_algorithms_dev /src
	/home/elias-hanna/src/redundant_arm /src
    /home/elias-hanna/src/model_based_qd /git
    
%environment
    export PYTHONPATH=$PYTHONPATH:/workspace/lib/python3.8/site-packages/
    #export PYTHONPATH=$PYTHONPATH:/git/model_based_qd/
    export LD_LIBRARY_PATH="/workspace/lib:$LD_LIBRARY_PATH"
    export MUJOCO_PY_MUJOCO_PATH=/src/.mujoco/mujoco210
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/src/.mujoco/mujoco210/bin

   
%post
    export LD_LIBRARY_PATH="/workspace/lib:$LD_LIBRARY_PATH"
    mkdir -p /src/.mujoco
	mkdir -p /src/tmp

    DEBIAN_FRONTEND=noninteractive apt update -y
	DEBIAN_FRONTEND=noninteractive apt install -y wget libosmesa6-dev curl git libgl1-mesa-dev \
        libgl1-mesa-glx libglew-dev libosmesa6-dev software-properties-common net-tools nano \
	virtualenv xpra xserver-xorg-dev patchelf swig cmake xvfb python3-tk ffmpeg
    	pip install numpy tqdm matplotlib sklearn scipy cma gym==0.21 deap colorednoise mujoco statsmodels seaborn pandas graphviz pybullet torch torchvision argparse box2d

    wget -nv https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz -O mujoco.tar.gz
	tar -xvzf mujoco.tar.gz --directory /src/.mujoco
	rm mujoco.tar.gz
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/src/.mujoco/mujoco210/bin
	export MUJOCO_PY_MUJOCO_PATH=/src/.mujoco/mujoco210
	cd /src/mujoco-py
	echo "Starting to install local patched version of mujoco-py"
	pip install --upgrade .
	echo "Finished installing mujoco-py, importing it for first time for compilation"
	python3 -c 'import mujoco_py'
    cd /src/mb_ge
    pip install -e .
    cd /src/libfastsim
    ./waf configure
    ./waf build
    ./waf install
    cd /src/pyfastsim
    pip install -e .
    cd /src/fastsim_gym
    pip install -e .
    cd /src/diversity_algorithms_dev
    pip install -e .
    cd /src/redundant_arm
    pip install -e .
    cd /src/model_init_study
    pip install -e .

%runscript

    ############# Starting a VNC server ##################
    # Sleep random duration between 0 and 90 seconds, to prevent 2 vnc-servers from starting at the same time on the same host.
    bash -c 'sleep $[ ( $RANDOM % 90 ) + 1 ]s'\

    # Updating the HOME folder for the container, where the .Xauthority file will be created.
    # That solution works iff the appropriate binding is performed (this is done automatically in gitlab-notebook jobs)
    export HOME=/tmp/home
    mkdir $HOME
    D=$(/opt/TurboVNC/bin/vncserver 2>&1 | grep "Desktop" | awk '{print $3}' | sed 's/.*://g')
    export DISPLAY=':'$D

    ################# Creating results folder ########################
    CURPATH=$(pwd)
    cd /git/model_based_qd/
    DIRNAME=results
    PATHNAME=$(date +%Y-%m-%d_%H_%M_%S)_$$

    # Create a random direcotry name where XXX will be replaced with random characters
    mkdir -p $CURPATH/$DIRNAME/
    tmp_dir=$(mktemp -d -p $CURPATH/$DIRNAME/ ${PATHNAME}_XXX)
    mkdir -p $tmp_dir
    echo tmp_dir is $tmp_dir

    ####################### Run program ####################
    cd /git/model_based_qd/
    python -u pushing_main.py --num_cores 30 --log_dir $tmp_dir --dump_period 10000
    #python -u hexapod_omni_online_main.py --num_cores 30 --log_dir $tmp_dir --dump_period 5000
    #python -u hexapod_omni_baseline_main.py --num_cores 30 --log_dir $tmp_dir --dump_period 10000
    #python -u hexapod_uni_baseline_main.py --num_cores 30 --log_dir $tmp_dir --dump_period 500 --max_evals 50000
    #python -u pushing_baseline_main.py --num_cores 30 --log_dir $tmp_dir --dump_period 10000



# CREATE AND DEFINE DIFFERENT APPS TO RUN AS JOBS - called from the json file
# Example: Can run using singularity run --app gen_job_scripts image_name
%apprun gen_job_scripts
    echo "Generating job scripts"
    python3 /git/model_based_qd/submodules/gitlab_notebook/gen_job_script.py "$@"


%apprun Analysis
    cd /git/sferes2/
    PATH_ANALYSIS=$1
    shift
    python3 /git/sferes2/exp/rastrigin_stochastic/analyse/main_analysis.py -d $PATH_ANALYSIS "$@" --sample
    cd /git/sferes2/exp/rastrigin_stochastic/
    python3 ./submodules/gitlab_notebook/gen_report.py $PATH_ANALYSIS $PATH_ANALYSIS



%help
    This is the development and running environment of the model based qd 
